/*
 * This file is generated by jOOQ.
 */
package com.example.jooqh2bitand.tables;


import com.example.jooqh2bitand.DefaultSchema;
import com.example.jooqh2bitand.Keys;
import com.example.jooqh2bitand.tables.records.TestentityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Testentity extends TableImpl<TestentityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TESTENTITY</code>
     */
    public static final Testentity TESTENTITY = new Testentity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestentityRecord> getRecordType() {
        return TestentityRecord.class;
    }

    /**
     * The column <code>TESTENTITY.ID</code>.
     */
    public final TableField<TestentityRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TESTENTITY.DATA</code>.
     */
    public final TableField<TestentityRecord, byte[]> DATA = createField(DSL.name("DATA"), SQLDataType.VARBINARY.nullable(false), this, "");

    private Testentity(Name alias, Table<TestentityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Testentity(Name alias, Table<TestentityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TESTENTITY</code> table reference
     */
    public Testentity(String alias) {
        this(DSL.name(alias), TESTENTITY);
    }

    /**
     * Create an aliased <code>TESTENTITY</code> table reference
     */
    public Testentity(Name alias) {
        this(alias, TESTENTITY);
    }

    /**
     * Create a <code>TESTENTITY</code> table reference
     */
    public Testentity() {
        this(DSL.name("TESTENTITY"), null);
    }

    public <O extends Record> Testentity(Table<O> child, ForeignKey<O, TestentityRecord> key) {
        super(child, key, TESTENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TestentityRecord, Long> getIdentity() {
        return (Identity<TestentityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestentityRecord> getPrimaryKey() {
        return Keys.PK_TESTENTITY;
    }

    @Override
    public Testentity as(String alias) {
        return new Testentity(DSL.name(alias), this);
    }

    @Override
    public Testentity as(Name alias) {
        return new Testentity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Testentity rename(String name) {
        return new Testentity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Testentity rename(Name name) {
        return new Testentity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
